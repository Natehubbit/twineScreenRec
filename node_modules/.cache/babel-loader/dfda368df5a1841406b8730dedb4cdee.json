{"ast":null,"code":"const RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\n\nRecordingService.startRecording = async () => {\n  RecordingService.videoRef.setAttribute('autoplay', true);\n\n  try {\n    RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n    document.getElementById('video').appendChild(RecordingService.videoRef);\n  } catch (err) {\n    console.error(\"Error: \" + err);\n  }\n};\n\nRecordingService.stopRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.videoRef.srcObject = null;\n};\n\nRecordingService.pauseRecording = () => {// this.videoRef.srcObject.p\n};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["RECORD_OPTIONS","video","audio","RecordingService","videoRef","document","getElementById","startRecording","setAttribute","srcObject","navigator","mediaDevices","getDisplayMedia","appendChild","err","console","error","stopRecording","tracks","getTracks","forEach","track","stop","pauseRecording"],"mappings":"AAAA,MAAMA,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvB;AAKA,eAAe,MAAMC,gBAAN,CAAuB;AAAjBA,gB,CAIZC,Q,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,C;;AAJCH,gB,CASZI,c,GAAiB,YAAY;AATjBJ,EAAAA,gBAUjB,CAAKC,QAAL,CAAcI,YAAd,CAA2B,UAA3B,EAAsC,IAAtC;;AACA,MAAI;AAXaL,IAAAA,gBAYf,CAAKC,QAAL,CAAcK,SAAd,GAA0B,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCZ,cAAvC,CAAhC;AACAK,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCO,WAAjC,CAbeV,gBAa8B,CAAKC,QAAlD;AACD,GAHD,CAGE,OAAOU,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAYF,GAA1B;AACD;AACF,C;;AAjBkBX,gB,CAsBZc,a,GAAgB,MAAM;AAC3B,MAAIC,MAAM,GAvBOf,gBAuBJ,CAAKC,QAAL,CAAcK,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AAxBiBnB,EAAAA,gBAyBjB,CAAKC,QAAL,CAAcK,SAAd,GAA0B,IAA1B;AACD,C;;AA1BkBN,gB,CA4BZoB,c,GAAiB,MAAM,CAC5B;AACD,C","sourcesContent":["const RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\nexport default class RecordingService {\n  /**\n   * static ref for video node\n   */\n  static videoRef = document.getElementById(\"video\")\n\n  /**\n   * function to record screen\n   */\n  static startRecording = async () => {\n    this.videoRef.setAttribute('autoplay',true)\n    try {\n      this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n      document.getElementById('video').appendChild(this.videoRef)\n    } catch (err) {\n      console.error(\"Error: \" + err)\n    }\n  }\n\n  /**\n   * function to stop recording\n   */\n  static stopRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.videoRef.srcObject = null;\n  }\n\n  static pauseRecording = () => {\n    // this.videoRef.srcObject.p\n  }\n}\n"]},"metadata":{},"sourceType":"module"}