{"ast":null,"code":"import React from 'react';\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\nRecordingService.msgContainer = document.getElementById(\"message\");\nRecordingService.mediaRecorder = null;\nRecordingService.recordedChunks = [];\n\nRecordingService.startRecording = async () => {\n  try {\n    RecordingService.videoRef.style.display = 'block';\n    RecordingService.videoRef.setAttribute('autoplay', true);\n    RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n    RecordingService.recordVideo(RecordingService.videoRef.srcObject);\n    return true;\n  } catch (err) {\n    console.error(\"Error: \" + err);\n    return false;\n  }\n};\n\nRecordingService.stopRecording = () => {\n  try {\n    let tracks = RecordingService.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    RecordingService.videoRef.srcObject = null;\n    RecordingService.removeMessage();\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.pauseRecording = () => {\n  try {\n    let tracks = RecordingService.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    RecordingService.hideVideo();\n    RecordingService.showMessage();\n    RecordingService.mediaRecorder.stop();\n    const blob = new Blob(RecordingService.recordedChunks, {\n      type: 'video/webm'\n    });\n    const url = URL.createObjectURL(blob);\n    console.log(url); // const d = mediaRecorder.requestData()  \n    // console.log(d)   \n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.hideVideo = () => {\n  RecordingService.videoRef.style.display = \"none\";\n};\n\nRecordingService.showMessage = () => {\n  try {\n    RecordingService.msgContainer.style.display = \"flex\";\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.removeMessage = () => {\n  RecordingService.msgContainer.style.display = 'none';\n};\n\nRecordingService.recordVideo = stream => {\n  const handleDataAvailable = event => {\n    if (event.data.size > 0) {\n      RecordingService.recordedChunks.push(event.data);\n    }\n  };\n\n  const options = {\n    mimeType: 'video/webm;codecs=vp9'\n  };\n  RecordingService.mediaRecorder = new MediaRecorder(stream, options);\n  RecordingService.mediaRecorder.ondataavailable = handleDataAvailable;\n  RecordingService.mediaRecorder.start();\n};\n\nRecordingService.downloadVideo = () => {};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["React","RECORD_OPTIONS","video","audio","RecordingService","videoRef","document","getElementById","msgContainer","mediaRecorder","recordedChunks","startRecording","style","display","setAttribute","srcObject","navigator","mediaDevices","getDisplayMedia","recordVideo","err","console","error","stopRecording","tracks","getTracks","forEach","track","stop","removeMessage","pauseRecording","hideVideo","showMessage","blob","Blob","type","url","URL","createObjectURL","log","stream","handleDataAvailable","event","data","size","push","options","mimeType","MediaRecorder","ondataavailable","start","downloadVideo"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\nexport default class RecordingService {\n  /**\n   * static ref for video node\n   */\n  static videoRef = document.getElementById(\"video\")\n  static msgContainer = document.getElementById(\"message\")\n  static mediaRecorder = null\n  static recordedChunks = []\n\n  /**\n   * function to record screen\n   */\n  static startRecording = async () => {\n    try {\n      this.videoRef.style.display='block'\n      this.videoRef.setAttribute('autoplay',true)\n      this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n      this.recordVideo(this.videoRef.srcObject)\n      return true\n    } catch (err) {\n      console.error(\"Error: \" + err)\n      return false\n    }\n  }\n\n  /**\n   * function to stop recording\n   */\n  static stopRecording = () => {\n    try {\n      let tracks = this.videoRef.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      this.videoRef.srcObject = null;\n      this.removeMessage()\n    } catch (error) {\n      console.error(\"error: \",error) \n    }\n  }\n\n  /**\n   * function to pause recording\n   */\n  static pauseRecording = () => {\n    try {\n      let tracks = this.videoRef.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      this.hideVideo()\n      this.showMessage()\n      this.mediaRecorder.stop()\n      const blob = new Blob(this.recordedChunks, {\n        type: 'video/webm'\n      });\n      const url = URL.createObjectURL(blob);\n      console.log(url)\n      // const d = mediaRecorder.requestData()  \n      // console.log(d)   \n    } catch (error) {\n      console.error(\"error: \",error)\n    }\n  }\n\n  /**\n   * function to hide video\n   */\n  static hideVideo = () => {\n    this.videoRef.style.display=\"none\"\n  }\n\n  /**\n   * function to show message on pause\n   */\n  static showMessage = () => {\n    try {\n      this.msgContainer.style.display=\"flex\"\n    } catch (error) {\n      console.error(\"error: \",error)\n    }\n  }\n\n  /**\n   * function to hide message\n   */\n  static removeMessage = () => {\n    this.msgContainer.style.display='none'\n  }\n\n  static recordVideo = (stream) => {\n    const handleDataAvailable = (event) => {\n      if (event.data.size > 0) {\n        this.recordedChunks.push(event.data);\n      }\n    }\n    const options = {mimeType: 'video/webm;codecs=vp9'};\n    this.mediaRecorder = new MediaRecorder(stream, options);\n    this.mediaRecorder.ondataavailable = handleDataAvailable;\n    this.mediaRecorder.start();\n  }\n\n  static downloadVideo = () => {\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module"}