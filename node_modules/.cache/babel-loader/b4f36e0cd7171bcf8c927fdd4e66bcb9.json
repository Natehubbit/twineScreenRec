{"ast":null,"code":"import React from 'react';\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nconst MESSAGE_HEADER = \"You are recording your screen\";\nconst MESSAGE_CONTENT = \"Use the controls below to pause, publish or discard recording\";\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\nRecordingService.msgContainer = document.getElementById(\"message\");\n\nRecordingService.startRecording = async () => {\n  try {\n    RecordingService.videoRef.style.display = 'block';\n    RecordingService.videoRef.setAttribute('autoplay', true);\n    RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n    return true;\n  } catch (err) {\n    console.error(\"Error: \" + err);\n    return false;\n  }\n};\n\nRecordingService.stopRecording = () => {\n  try {\n    let tracks = RecordingService.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    RecordingService.videoRef.srcObject = null;\n    RecordingService.removeMessage();\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.pauseRecording = () => {\n  try {\n    let tracks = RecordingService.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    RecordingService.hideVideo();\n    RecordingService.showMessage();\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.hideVideo = () => {\n  RecordingService.videoRef.style.display = \"none\";\n};\n\nRecordingService.showMessage = () => {\n  try {\n    RecordingService.msgContainer.style.display = \"flex\";\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.removeMessage = () => {\n  RecordingService.msgContainer.style.display = 'none';\n};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["React","RECORD_OPTIONS","video","audio","MESSAGE_HEADER","MESSAGE_CONTENT","RecordingService","videoRef","document","getElementById","msgContainer","startRecording","style","display","setAttribute","srcObject","navigator","mediaDevices","getDisplayMedia","err","console","error","stopRecording","tracks","getTracks","forEach","track","stop","removeMessage","pauseRecording","hideVideo","showMessage"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvB;AAKA,MAAMC,cAAc,GAAG,+BAAvB;AACA,MAAMC,eAAe,GAAG,+DAAxB;AAGA,eAAe,MAAMC,gBAAN,CAAuB;AAAjBA,gB,CAIZC,Q,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,C;AAJCH,gB,CAKZI,Y,GAAeF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,C;;AALHH,gB,CAWZK,c,GAAiB,YAAY;AAClC,MAAI;AAZaL,IAAAA,gBAaf,CAAKC,QAAL,CAAcK,KAAd,CAAoBC,OAApB,GAA4B,OAA5B;AAbeP,IAAAA,gBAcf,CAAKC,QAAL,CAAcO,YAAd,CAA2B,UAA3B,EAAsC,IAAtC;AAdeR,IAAAA,gBAef,CAAKC,QAAL,CAAcQ,SAAd,GAA0B,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCjB,cAAvC,CAAhC;AACA,WAAO,IAAP;AACD,GALD,CAKE,OAAOkB,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAYF,GAA1B;AACA,WAAO,KAAP;AACD;AACF,C;;AArBkBb,gB,CA0BZgB,a,GAAgB,MAAM;AAC3B,MAAI;AACF,QAAIC,MAAM,GA5BKjB,gBA4BF,CAAKC,QAAL,CAAcQ,SAAd,CAAwBS,SAAxB,EAAb;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AA7BerB,IAAAA,gBA8Bf,CAAKC,QAAL,CAAcQ,SAAd,GAA0B,IAA1B;AA9BeT,IAAAA,gBA+Bf,CAAKsB,aAAL;AACD,GALD,CAKE,OAAOP,KAAP,EAAc;AACdD,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAwBA,KAAxB;AACD;AACF,C;;AAnCkBf,gB,CAqCZuB,c,GAAiB,MAAM;AAC5B,MAAI;AACF,QAAIN,MAAM,GAvCKjB,gBAuCF,CAAKC,QAAL,CAAcQ,SAAd,CAAwBS,SAAxB,EAAb;AACAD,IAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AAxCerB,IAAAA,gBAyCf,CAAKwB,SAAL;AAzCexB,IAAAA,gBA0Cf,CAAKyB,WAAL;AACD,GALD,CAKE,OAAOV,KAAP,EAAc;AACdD,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAwBA,KAAxB;AACD;AACF,C;;AA9CkBf,gB,CAgDZwB,S,GAAY,MAAM;AAhDNxB,EAAAA,gBAiDjB,CAAKC,QAAL,CAAcK,KAAd,CAAoBC,OAApB,GAA4B,MAA5B;AACD,C;;AAlDkBP,gB,CAoDZyB,W,GAAc,MAAM;AACzB,MAAI;AArDazB,IAAAA,gBAsDf,CAAKI,YAAL,CAAkBE,KAAlB,CAAwBC,OAAxB,GAAgC,MAAhC;AACD,GAFD,CAEE,OAAOQ,KAAP,EAAc;AACdD,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAwBA,KAAxB;AACD;AACF,C;;AA1DkBf,gB,CA4DZsB,a,GAAgB,MAAM;AA5DVtB,EAAAA,gBA6DjB,CAAKI,YAAL,CAAkBE,KAAlB,CAAwBC,OAAxB,GAAgC,MAAhC;AACD,C","sourcesContent":["import React from 'react'\n\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\nconst MESSAGE_HEADER = \"You are recording your screen\"\nconst MESSAGE_CONTENT = \"Use the controls below to pause, publish or discard recording\"\n\n\nexport default class RecordingService {\n  /**\n   * static ref for video node\n   */\n  static videoRef = document.getElementById(\"video\")\n  static msgContainer = document.getElementById(\"message\")\n\n\n  /**\n   * function to record screen\n   */\n  static startRecording = async () => {\n    try {\n      this.videoRef.style.display='block'\n      this.videoRef.setAttribute('autoplay',true)\n      this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n      return true\n    } catch (err) {\n      console.error(\"Error: \" + err)\n      return false\n    }\n  }\n\n  /**\n   * function to stop recording\n   */\n  static stopRecording = () => {\n    try {\n      let tracks = this.videoRef.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      this.videoRef.srcObject = null;\n      this.removeMessage()\n    } catch (error) {\n      console.error(\"error: \",error) \n    }\n  }\n\n  static pauseRecording = () => {\n    try {\n      let tracks = this.videoRef.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      this.hideVideo()\n      this.showMessage()\n    } catch (error) {\n      console.error(\"error: \",error)\n    }\n  }\n\n  static hideVideo = () => {\n    this.videoRef.style.display=\"none\"\n  }\n\n  static showMessage = () => {\n    try {\n      this.msgContainer.style.display=\"flex\"\n    } catch (error) {\n      console.error(\"error: \",error)\n    }\n  }\n\n  static removeMessage = () => {\n    this.msgContainer.style.display='none'\n  }\n}\n"]},"metadata":{},"sourceType":"module"}