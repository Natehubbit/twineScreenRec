{"ast":null,"code":"import React from 'react';\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\nRecordingService.msgContainer = document.getElementById(\"message\");\n\nRecordingService.startRecording = async () => {\n  RecordingService.videoRef.style.display = 'block';\n  RecordingService.videoRef.setAttribute('autoplay', true);\n\n  try {\n    RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n    document.getElementById('video').appendChild(RecordingService.videoRef);\n  } catch (err) {\n    console.error(\"Error: \" + err);\n  }\n};\n\nRecordingService.stopRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.videoRef.srcObject = null;\n};\n\nRecordingService.pauseRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.hideVideo();\n  RecordingService.showMessage();\n};\n\nRecordingService.hideVideo = () => {\n  RecordingService.videoRef.style.display = \"none\";\n};\n\nRecordingService.showMessage = html => {\n  const messageHead = document.createElement('h6');\n  const messageInfo = document.createElement('p');\n  messageHead.innerText = \"You are recording your screen\";\n  messageInfo.innerHTML = \"Use the controls below to pause, publish or discard recording\";\n  RecordingService.msgContainer.appendChild(messageHead);\n  RecordingService.msgContainer.appendChild(messageInfo);\n};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["React","RECORD_OPTIONS","video","audio","RecordingService","videoRef","document","getElementById","msgContainer","startRecording","style","display","setAttribute","srcObject","navigator","mediaDevices","getDisplayMedia","appendChild","err","console","error","stopRecording","tracks","getTracks","forEach","track","stop","pauseRecording","hideVideo","showMessage","html","messageHead","createElement","messageInfo","innerText","innerHTML"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvB;AAMA,eAAe,MAAMC,gBAAN,CAAuB;AAAjBA,gB,CAIZC,Q,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,C;AAJCH,gB,CAKZI,Y,GAAeF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,C;;AALHH,gB,CAUZK,c,GAAiB,YAAY;AAVjBL,EAAAA,gBAWjB,CAAKC,QAAL,CAAcK,KAAd,CAAoBC,OAApB,GAA4B,OAA5B;AAXiBP,EAAAA,gBAYjB,CAAKC,QAAL,CAAcO,YAAd,CAA2B,UAA3B,EAAsC,IAAtC;;AACA,MAAI;AAbaR,IAAAA,gBAcf,CAAKC,QAAL,CAAcQ,SAAd,GAA0B,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCf,cAAvC,CAAhC;AACAK,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCU,WAAjC,CAfeb,gBAe8B,CAAKC,QAAlD;AACD,GAHD,CAGE,OAAOa,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAYF,GAA1B;AACD;AACF,C;;AAnBkBd,gB,CAwBZiB,a,GAAgB,MAAM;AAC3B,MAAIC,MAAM,GAzBOlB,gBAyBJ,CAAKC,QAAL,CAAcQ,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AA1BiBtB,EAAAA,gBA2BjB,CAAKC,QAAL,CAAcQ,SAAd,GAA0B,IAA1B;AACD,C;;AA5BkBT,gB,CA8BZuB,c,GAAiB,MAAM;AAC5B,MAAIL,MAAM,GA/BOlB,gBA+BJ,CAAKC,QAAL,CAAcQ,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AAhCiBtB,EAAAA,gBAiCjB,CAAKwB,SAAL;AAjCiBxB,EAAAA,gBAkCjB,CAAKyB,WAAL;AACD,C;;AAnCkBzB,gB,CAqCZwB,S,GAAY,MAAM;AArCNxB,EAAAA,gBAsCjB,CAAKC,QAAL,CAAcK,KAAd,CAAoBC,OAApB,GAA4B,MAA5B;AACD,C;;AAvCkBP,gB,CAyCZyB,W,GAAeC,IAAD,IAAU;AAC7B,QAAMC,WAAW,GAAGzB,QAAQ,CAAC0B,aAAT,CAAuB,IAAvB,CAApB;AACA,QAAMC,WAAW,GAAG3B,QAAQ,CAAE0B,aAAV,CAAwB,GAAxB,CAApB;AACAD,EAAAA,WAAW,CAACG,SAAZ,GAAwB,+BAAxB;AACAD,EAAAA,WAAW,CAACE,SAAZ,GAAwB,+DAAxB;AA7CiB/B,EAAAA,gBA8CjB,CAAKI,YAAL,CAAkBS,WAAlB,CAA8Bc,WAA9B;AA9CiB3B,EAAAA,gBA+CjB,CAAKI,YAAL,CAAkBS,WAAlB,CAA8BgB,WAA9B;AACD,C","sourcesContent":["import React from 'react'\n\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\n\nexport default class RecordingService {\n  /**\n   * static ref for video node\n   */\n  static videoRef = document.getElementById(\"video\")\n  static msgContainer = document.getElementById(\"message\")\n\n  /**\n   * function to record screen\n   */\n  static startRecording = async () => {\n    this.videoRef.style.display='block'\n    this.videoRef.setAttribute('autoplay',true)\n    try {\n      this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n      document.getElementById('video').appendChild(this.videoRef)\n    } catch (err) {\n      console.error(\"Error: \" + err)\n    }\n  }\n\n  /**\n   * function to stop recording\n   */\n  static stopRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.videoRef.srcObject = null;\n  }\n\n  static pauseRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.hideVideo()\n    this.showMessage()\n  }\n\n  static hideVideo = () => {\n    this.videoRef.style.display=\"none\"\n  }\n\n  static showMessage = (html) => {\n    const messageHead = document.createElement('h6')\n    const messageInfo = document. createElement('p')\n    messageHead.innerText = \"You are recording your screen\"\n    messageInfo.innerHTML = \"Use the controls below to pause, publish or discard recording\"\n    this.msgContainer.appendChild(messageHead)\n    this.msgContainer.appendChild(messageInfo)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}