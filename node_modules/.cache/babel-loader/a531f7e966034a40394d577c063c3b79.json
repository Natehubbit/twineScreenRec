{"ast":null,"code":"const RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\n\nRecordingService.startRecording = async () => {\n  try {\n    RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n    document.getElementById('video').appendChild(RecordingService.videoRef);\n  } catch (err) {\n    console.error(\"Error: \" + err);\n  }\n};\n\nRecordingService.stopRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.videoRef.srcObject = null;\n  RecordingService.videoRef.remove();\n};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["RECORD_OPTIONS","video","audio","RecordingService","videoRef","document","getElementById","startRecording","srcObject","navigator","mediaDevices","getDisplayMedia","appendChild","err","console","error","stopRecording","tracks","getTracks","forEach","track","stop","remove"],"mappings":"AAAA,MAAMA,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvB;AAKA,eAAe,MAAMC,gBAAN,CAAuB;AAAjBA,gB,CACZC,Q,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,C;;AADCH,gB,CAEZI,c,GAAiB,YAAY;AAClC,MAAI;AAHaJ,IAAAA,gBAIf,CAAKC,QAAL,CAAcI,SAAd,GAA0B,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCX,cAAvC,CAAhC;AACAK,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCM,WAAjC,CALeT,gBAK8B,CAAKC,QAAlD;AACD,GAHD,CAGE,OAAOS,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAYF,GAA1B;AACD;AACF,C;;AATkBV,gB,CAUZa,a,GAAgB,MAAM;AAC3B,MAAIC,MAAM,GAXOd,gBAWJ,CAAKC,QAAL,CAAcI,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AAZiBlB,EAAAA,gBAajB,CAAKC,QAAL,CAAcI,SAAd,GAA0B,IAA1B;AAbiBL,EAAAA,gBAcjB,CAAKC,QAAL,CAAckB,MAAd;AACD,C","sourcesContent":["const RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\nexport default class RecordingService {\n  static videoRef = document.getElementById(\"video\")\n  static startRecording = async () => {\n    try {\n      this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n      document.getElementById('video').appendChild(this.videoRef)\n    } catch (err) {\n      console.error(\"Error: \" + err)\n    }\n  }\n  static stopRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.videoRef.srcObject = null;\n    this.videoRef.remove()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}