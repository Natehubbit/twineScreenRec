{"ast":null,"code":"import React from 'react';\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\n\nRecordingService.startRecording = async () => {\n  RecordingService.videoRef.style.display = 'block';\n  RecordingService.videoRef.setAttribute('autoplay', true);\n\n  try {\n    RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n    document.getElementById('video').appendChild(RecordingService.videoRef);\n  } catch (err) {\n    console.error(\"Error: \" + err);\n  }\n};\n\nRecordingService.stopRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.videoRef.srcObject = null;\n};\n\nRecordingService.pauseRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.hideVideo();\n  RecordingService.showMessage(HTML_MESSAGE);\n};\n\nRecordingService.hideVideo = () => {\n  RecordingService.videoRef.style.display = \"none\";\n};\n\nRecordingService.showMessage = html => {\n  const container = document.getElementById(\"message\");\n  container.appendChild(HTML_MESSAGE);\n};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["React","RECORD_OPTIONS","video","audio","RecordingService","videoRef","document","getElementById","startRecording","style","display","setAttribute","srcObject","navigator","mediaDevices","getDisplayMedia","appendChild","err","console","error","stopRecording","tracks","getTracks","forEach","track","stop","pauseRecording","hideVideo","showMessage","HTML_MESSAGE","html","container"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvB;AAMA,eAAe,MAAMC,gBAAN,CAAuB;AAAjBA,gB,CAIZC,Q,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,C;;AAJCH,gB,CASZI,c,GAAiB,YAAY;AATjBJ,EAAAA,gBAUjB,CAAKC,QAAL,CAAcI,KAAd,CAAoBC,OAApB,GAA4B,OAA5B;AAViBN,EAAAA,gBAWjB,CAAKC,QAAL,CAAcM,YAAd,CAA2B,UAA3B,EAAsC,IAAtC;;AACA,MAAI;AAZaP,IAAAA,gBAaf,CAAKC,QAAL,CAAcO,SAAd,GAA0B,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCd,cAAvC,CAAhC;AACAK,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCS,WAAjC,CAdeZ,gBAc8B,CAAKC,QAAlD;AACD,GAHD,CAGE,OAAOY,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAYF,GAA1B;AACD;AACF,C;;AAlBkBb,gB,CAuBZgB,a,GAAgB,MAAM;AAC3B,MAAIC,MAAM,GAxBOjB,gBAwBJ,CAAKC,QAAL,CAAcO,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AAzBiBrB,EAAAA,gBA0BjB,CAAKC,QAAL,CAAcO,SAAd,GAA0B,IAA1B;AACD,C;;AA3BkBR,gB,CA6BZsB,c,GAAiB,MAAM;AAC5B,MAAIL,MAAM,GA9BOjB,gBA8BJ,CAAKC,QAAL,CAAcO,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AA/BiBrB,EAAAA,gBAgCjB,CAAKuB,SAAL;AAhCiBvB,EAAAA,gBAiCjB,CAAKwB,WAAL,CAAiBC,YAAjB;AACD,C;;AAlCkBzB,gB,CAoCZuB,S,GAAY,MAAM;AApCNvB,EAAAA,gBAqCjB,CAAKC,QAAL,CAAcI,KAAd,CAAoBC,OAApB,GAA4B,MAA5B;AACD,C;;AAtCkBN,gB,CAwCZwB,W,GAAeE,IAAD,IAAU;AAC7B,QAAMC,SAAS,GAAGzB,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAlB;AACAwB,EAAAA,SAAS,CAACf,WAAV,CAAsBa,YAAtB;AACD,C","sourcesContent":["import React from 'react'\n\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\n\nexport default class RecordingService {\n  /**\n   * static ref for video node\n   */\n  static videoRef = document.getElementById(\"video\")\n\n  /**\n   * function to record screen\n   */\n  static startRecording = async () => {\n    this.videoRef.style.display='block'\n    this.videoRef.setAttribute('autoplay',true)\n    try {\n      this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n      document.getElementById('video').appendChild(this.videoRef)\n    } catch (err) {\n      console.error(\"Error: \" + err)\n    }\n  }\n\n  /**\n   * function to stop recording\n   */\n  static stopRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.videoRef.srcObject = null;\n  }\n\n  static pauseRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.hideVideo()\n    this.showMessage(HTML_MESSAGE)\n  }\n\n  static hideVideo = () => {\n    this.videoRef.style.display=\"none\"\n  }\n\n  static showMessage = (html) => {\n    const container = document.getElementById(\"message\")\n    container.appendChild(HTML_MESSAGE)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}