{"ast":null,"code":"import React from 'react';\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\nRecordingService.msgContainer = document.getElementById(\"message\");\nRecordingService.mediaRecorder = null;\nRecordingService.recordedChunks = [];\n\nRecordingService.startRecording = async () => {\n  try {\n    RecordingService.videoRef.style.display = 'block';\n    RecordingService.videoRef.setAttribute('autoplay', true);\n    RecordingService.recordVideo();\n    return true;\n  } catch (err) {\n    console.error(\"Error: \" + err);\n    return false;\n  }\n};\n\nRecordingService.stopRecording = () => {\n  try {\n    let tracks = RecordingService.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    RecordingService.videoRef.srcObject = null;\n    RecordingService.removeMessage();\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.pauseRecording = () => {\n  try {\n    let tracks = RecordingService.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    RecordingService.hideVideo();\n    RecordingService.showMessage();\n    RecordingService.mediaRecorder.stop();\n    console.log(RecordingService.videoRef.srcObject.getAudioTracks());\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.hideVideo = () => {\n  RecordingService.videoRef.style.display = \"none\";\n};\n\nRecordingService.showMessage = () => {\n  try {\n    RecordingService.msgContainer.style.display = \"flex\";\n  } catch (error) {\n    console.error(\"error: \", error);\n  }\n};\n\nRecordingService.removeMessage = () => {\n  RecordingService.msgContainer.style.display = 'none';\n};\n\nRecordingService.recordVideo = async () => {\n  await navigator.mediaDevices.getUserMedia({\n    audio: true\n  });\n  RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n\n  const handleDataAvailable = event => {\n    if (event.data.size > 0) {\n      RecordingService.recordedChunks.push(event.data);\n    }\n  };\n\n  const options = {\n    mimeType: 'video/webm'\n  };\n  RecordingService.mediaRecorder = new MediaRecorder(RecordingService.videoRef.srcObject, options);\n  RecordingService.mediaRecorder.ondataavailable = handleDataAvailable;\n  RecordingService.mediaRecorder.start();\n};\n\nRecordingService.downloadVideo = () => {\n  const blob = new Blob(RecordingService.recordedChunks, {\n    type: 'video/webm'\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  document.body.appendChild(a);\n  a.style = 'display: none';\n  a.href = url;\n  a.download = 'video.webm';\n  a.click();\n  window.URL.revokeObjectURL(url);\n};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["React","RECORD_OPTIONS","video","audio","RecordingService","videoRef","document","getElementById","msgContainer","mediaRecorder","recordedChunks","startRecording","style","display","setAttribute","recordVideo","err","console","error","stopRecording","tracks","srcObject","getTracks","forEach","track","stop","removeMessage","pauseRecording","hideVideo","showMessage","log","getAudioTracks","navigator","mediaDevices","getUserMedia","getDisplayMedia","handleDataAvailable","event","data","size","push","options","mimeType","MediaRecorder","ondataavailable","start","downloadVideo","blob","Blob","type","url","URL","createObjectURL","a","createElement","body","appendChild","href","download","click","window","revokeObjectURL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvB;AAKA,eAAe,MAAMC,gBAAN,CAAuB;AAAjBA,gB,CAIZC,Q,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,C;AAJCH,gB,CAKZI,Y,GAAeF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,C;AALHH,gB,CAMZK,a,GAAgB,I;AANJL,gB,CAOZM,c,GAAiB,E;;AAPLN,gB,CAYZO,c,GAAiB,YAAY;AAClC,MAAI;AAbaP,IAAAA,gBAcf,CAAKC,QAAL,CAAcO,KAAd,CAAoBC,OAApB,GAA4B,OAA5B;AAdeT,IAAAA,gBAef,CAAKC,QAAL,CAAcS,YAAd,CAA2B,UAA3B,EAAsC,IAAtC;AAfeV,IAAAA,gBAgBf,CAAKW,WAAL;AACA,WAAO,IAAP;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAYF,GAA1B;AACA,WAAO,KAAP;AACD;AACF,C;;AAtBkBZ,gB,CA2BZe,a,GAAgB,MAAM;AAC3B,MAAI;AACF,QAAIC,MAAM,GA7BKhB,gBA6BF,CAAKC,QAAL,CAAcgB,SAAd,CAAwBC,SAAxB,EAAb;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AA9BerB,IAAAA,gBA+Bf,CAAKC,QAAL,CAAcgB,SAAd,GAA0B,IAA1B;AA/BejB,IAAAA,gBAgCf,CAAKsB,aAAL;AACD,GALD,CAKE,OAAOR,KAAP,EAAc;AACdD,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAwBA,KAAxB;AACD;AACF,C;;AApCkBd,gB,CAyCZuB,c,GAAiB,MAAM;AAC5B,MAAI;AACF,QAAIP,MAAM,GA3CKhB,gBA2CF,CAAKC,QAAL,CAAcgB,SAAd,CAAwBC,SAAxB,EAAb;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AA5CerB,IAAAA,gBA6Cf,CAAKwB,SAAL;AA7CexB,IAAAA,gBA8Cf,CAAKyB,WAAL;AA9CezB,IAAAA,gBA+Cf,CAAKK,aAAL,CAAmBgB,IAAnB;AACAR,IAAAA,OAAO,CAACa,GAAR,CAhDe1B,gBAgDH,CAAKC,QAAL,CAAcgB,SAAd,CAAwBU,cAAxB,EAAZ;AACD,GAPD,CAOE,OAAOb,KAAP,EAAc;AACdD,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAwBA,KAAxB;AACD;AACF,C;;AApDkBd,gB,CAyDZwB,S,GAAY,MAAM;AAzDNxB,EAAAA,gBA0DjB,CAAKC,QAAL,CAAcO,KAAd,CAAoBC,OAApB,GAA4B,MAA5B;AACD,C;;AA3DkBT,gB,CAgEZyB,W,GAAc,MAAM;AACzB,MAAI;AAjEazB,IAAAA,gBAkEf,CAAKI,YAAL,CAAkBI,KAAlB,CAAwBC,OAAxB,GAAgC,MAAhC;AACD,GAFD,CAEE,OAAOK,KAAP,EAAc;AACdD,IAAAA,OAAO,CAACC,KAAR,CAAc,SAAd,EAAwBA,KAAxB;AACD;AACF,C;;AAtEkBd,gB,CA2EZsB,a,GAAgB,MAAM;AA3EVtB,EAAAA,gBA4EjB,CAAKI,YAAL,CAAkBI,KAAlB,CAAwBC,OAAxB,GAAgC,MAAhC;AACD,C;;AA7EkBT,gB,CA+EZW,W,GAAc,YAAY;AAC/B,QAAMiB,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AAAC/B,IAAAA,KAAK,EAAC;AAAP,GAApC,CAAN;AAhFiBC,EAAAA,gBAiFjB,CAAKC,QAAL,CAAcgB,SAAd,GAA0B,MAAMW,SAAS,CAACC,YAAV,CAAuBE,eAAvB,CAAuClC,cAAvC,CAAhC;;AACA,QAAMmC,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,GAAkB,CAAtB,EAAyB;AAnFVnC,MAAAA,gBAoFb,CAAKM,cAAL,CAAoB8B,IAApB,CAAyBH,KAAK,CAACC,IAA/B;AACD;AACF,GAJD;;AAKA,QAAMG,OAAO,GAAG;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAAhB;AAvFiBtC,EAAAA,gBAwFjB,CAAKK,aAAL,GAAqB,IAAIkC,aAAJ,CAxFJvC,gBAwFsB,CAAKC,QAAL,CAAcgB,SAAhC,EAA2CoB,OAA3C,CAArB;AAxFiBrC,EAAAA,gBAyFjB,CAAKK,aAAL,CAAmBmC,eAAnB,GAAqCR,mBAArC;AAzFiBhC,EAAAA,gBA0FjB,CAAKK,aAAL,CAAmBoC,KAAnB;AACD,C;;AA3FkBzC,gB,CA6FZ0C,a,GAAgB,MAAM;AAC3B,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CA9FI5C,gBA8FK,CAAKM,cAAd,EAA8B;AACzCuC,IAAAA,IAAI,EAAE;AADmC,GAA9B,CAAb;AAGA,QAAMC,GAAG,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAAZ;AACA,QAAMM,CAAC,GAAG/C,QAAQ,CAACgD,aAAT,CAAuB,GAAvB,CAAV;AACAhD,EAAAA,QAAQ,CAACiD,IAAT,CAAcC,WAAd,CAA0BH,CAA1B;AACAA,EAAAA,CAAC,CAACzC,KAAF,GAAU,eAAV;AACAyC,EAAAA,CAAC,CAACI,IAAF,GAASP,GAAT;AACAG,EAAAA,CAAC,CAACK,QAAF,GAAa,YAAb;AACAL,EAAAA,CAAC,CAACM,KAAF;AACAC,EAAAA,MAAM,CAACT,GAAP,CAAWU,eAAX,CAA2BX,GAA3B;AACD,C","sourcesContent":["import React from 'react'\n\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\nexport default class RecordingService {\n  /**\n   * static ref for video node\n   */\n  static videoRef = document.getElementById(\"video\")\n  static msgContainer = document.getElementById(\"message\")\n  static mediaRecorder = null\n  static recordedChunks = []\n\n  /**\n   * function to record screen\n   */\n  static startRecording = async () => {\n    try {\n      this.videoRef.style.display='block'\n      this.videoRef.setAttribute('autoplay',true)\n      this.recordVideo()\n      return true\n    } catch (err) {\n      console.error(\"Error: \" + err)\n      return false\n    }\n  }\n\n  /**\n   * function to stop recording\n   */\n  static stopRecording = () => {\n    try {\n      let tracks = this.videoRef.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      this.videoRef.srcObject = null;\n      this.removeMessage()\n    } catch (error) {\n      console.error(\"error: \",error) \n    }\n  }\n\n  /**\n   * function to pause recording\n   */\n  static pauseRecording = () => {\n    try {\n      let tracks = this.videoRef.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n      this.hideVideo()\n      this.showMessage()\n      this.mediaRecorder.stop()\n      console.log(this.videoRef.srcObject.getAudioTracks())\n    } catch (error) {\n      console.error(\"error: \",error)\n    }\n  }\n\n  /**\n   * function to hide video\n   */\n  static hideVideo = () => {\n    this.videoRef.style.display=\"none\"\n  }\n\n  /**\n   * function to show message on pause\n   */\n  static showMessage = () => {\n    try {\n      this.msgContainer.style.display=\"flex\"\n    } catch (error) {\n      console.error(\"error: \",error)\n    }\n  }\n\n  /**\n   * function to hide message\n   */\n  static removeMessage = () => {\n    this.msgContainer.style.display='none'\n  }\n\n  static recordVideo = async () => {\n    await navigator.mediaDevices.getUserMedia({audio:true})\n    this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n    const handleDataAvailable = (event) => {\n      if (event.data.size > 0) {\n        this.recordedChunks.push(event.data);\n      }\n    }\n    const options = {mimeType: 'video/webm'};\n    this.mediaRecorder = new MediaRecorder(this.videoRef.srcObject, options);\n    this.mediaRecorder.ondataavailable = handleDataAvailable;\n    this.mediaRecorder.start();\n  }\n\n  static downloadVideo = () => {\n    const blob = new Blob(this.recordedChunks, {\n      type: 'video/webm'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style = 'display: none';\n    a.href = url;\n    a.download = 'video.webm';\n    a.click();\n    window.URL.revokeObjectURL(url);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}