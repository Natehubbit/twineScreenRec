{"ast":null,"code":"import React from 'react';\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true\n};\nconst MESSAGE_HEADER = \"You are recording your screen\";\nconst MESSAGE_CONTENT = \"Use the controls below to pause, publish or discard recording\";\nexport default class RecordingService {}\nRecordingService.videoRef = document.getElementById(\"video\");\nRecordingService.msgContainer = document.getElementById(\"message\");\n\nRecordingService.startRecording = async () => {\n  RecordingService.videoRef.style.display = 'block';\n  RecordingService.videoRef.setAttribute('autoplay', true);\n\n  try {\n    RecordingService.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS);\n    document.getElementById('video').appendChild(RecordingService.videoRef);\n  } catch (err) {\n    console.error(\"Error: \" + err);\n  }\n};\n\nRecordingService.stopRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.videoRef.srcObject = null;\n};\n\nRecordingService.pauseRecording = () => {\n  let tracks = RecordingService.videoRef.srcObject.getTracks();\n  tracks.forEach(track => track.stop());\n  RecordingService.hideVideo();\n  RecordingService.showMessage();\n};\n\nRecordingService.hideVideo = () => {\n  RecordingService.videoRef.style.display = \"none\";\n};\n\nRecordingService.showMessage = (header, content) => {\n  const messageHead = document.createElement('p');\n  const messageInfo = document.createElement('p');\n  const div = document.createElement('div');\n  div.className = 'msg-content';\n  messageHead.innerText = MESSAGE_HEADER;\n  messageInfo.innerHTML = MESSAGE_CONTENT;\n  div.appendChild(messageHead);\n  div.appendChild(messageInfo);\n  RecordingService.msgContainer.appendChild(div);\n};\n\nRecordingService.removeMessage = () => {};","map":{"version":3,"sources":["/media/natehubbit/0051/null/topcoder/twine2/src/services/RecordingService.js"],"names":["React","RECORD_OPTIONS","video","audio","MESSAGE_HEADER","MESSAGE_CONTENT","RecordingService","videoRef","document","getElementById","msgContainer","startRecording","style","display","setAttribute","srcObject","navigator","mediaDevices","getDisplayMedia","appendChild","err","console","error","stopRecording","tracks","getTracks","forEach","track","stop","pauseRecording","hideVideo","showMessage","header","content","messageHead","createElement","messageInfo","div","className","innerText","innerHTML","removeMessage"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,KAAK,EAAE,IADc;AAErBC,EAAAA,KAAK,EAAE;AAFc,CAAvB;AAKA,MAAMC,cAAc,GAAG,+BAAvB;AACA,MAAMC,eAAe,GAAG,+DAAxB;AAGA,eAAe,MAAMC,gBAAN,CAAuB;AAAjBA,gB,CAIZC,Q,GAAWC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,C;AAJCH,gB,CAKZI,Y,GAAeF,QAAQ,CAACC,cAAT,CAAwB,SAAxB,C;;AALHH,gB,CAUZK,c,GAAiB,YAAY;AAVjBL,EAAAA,gBAWjB,CAAKC,QAAL,CAAcK,KAAd,CAAoBC,OAApB,GAA4B,OAA5B;AAXiBP,EAAAA,gBAYjB,CAAKC,QAAL,CAAcO,YAAd,CAA2B,UAA3B,EAAsC,IAAtC;;AACA,MAAI;AAbaR,IAAAA,gBAcf,CAAKC,QAAL,CAAcQ,SAAd,GAA0B,MAAMC,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuCjB,cAAvC,CAAhC;AACAO,IAAAA,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCU,WAAjC,CAfeb,gBAe8B,CAAKC,QAAlD;AACD,GAHD,CAGE,OAAOa,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,YAAYF,GAA1B;AACD;AACF,C;;AAnBkBd,gB,CAwBZiB,a,GAAgB,MAAM;AAC3B,MAAIC,MAAM,GAzBOlB,gBAyBJ,CAAKC,QAAL,CAAcQ,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AA1BiBtB,EAAAA,gBA2BjB,CAAKC,QAAL,CAAcQ,SAAd,GAA0B,IAA1B;AACD,C;;AA5BkBT,gB,CA8BZuB,c,GAAiB,MAAM;AAC5B,MAAIL,MAAM,GA/BOlB,gBA+BJ,CAAKC,QAAL,CAAcQ,SAAd,CAAwBU,SAAxB,EAAb;AACAD,EAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACC,IAAN,EAAxB;AAhCiBtB,EAAAA,gBAiCjB,CAAKwB,SAAL;AAjCiBxB,EAAAA,gBAkCjB,CAAKyB,WAAL;AACD,C;;AAnCkBzB,gB,CAqCZwB,S,GAAY,MAAM;AArCNxB,EAAAA,gBAsCjB,CAAKC,QAAL,CAAcK,KAAd,CAAoBC,OAApB,GAA4B,MAA5B;AACD,C;;AAvCkBP,gB,CAyCZyB,W,GAAc,CAACC,MAAD,EAAQC,OAAR,KAAoB;AACvC,QAAMC,WAAW,GAAG1B,QAAQ,CAAC2B,aAAT,CAAuB,GAAvB,CAApB;AACA,QAAMC,WAAW,GAAG5B,QAAQ,CAAE2B,aAAV,CAAwB,GAAxB,CAApB;AACA,QAAME,GAAG,GAAG7B,QAAQ,CAAC2B,aAAT,CAAuB,KAAvB,CAAZ;AACAE,EAAAA,GAAG,CAACC,SAAJ,GAAc,aAAd;AACAJ,EAAAA,WAAW,CAACK,SAAZ,GAAwBnC,cAAxB;AACAgC,EAAAA,WAAW,CAACI,SAAZ,GAAwBnC,eAAxB;AACAgC,EAAAA,GAAG,CAAClB,WAAJ,CAAgBe,WAAhB;AACAG,EAAAA,GAAG,CAAClB,WAAJ,CAAgBiB,WAAhB;AAjDiB9B,EAAAA,gBAkDjB,CAAKI,YAAL,CAAkBS,WAAlB,CAA8BkB,GAA9B;AACD,C;;AAnDkB/B,gB,CAqDZmC,a,GAAgB,MAAM,CAE5B,C","sourcesContent":["import React from 'react'\n\nconst RECORD_OPTIONS = {\n  video: true,\n  audio: true,\n}\n\nconst MESSAGE_HEADER = \"You are recording your screen\"\nconst MESSAGE_CONTENT = \"Use the controls below to pause, publish or discard recording\"\n\n\nexport default class RecordingService {\n  /**\n   * static ref for video node\n   */\n  static videoRef = document.getElementById(\"video\")\n  static msgContainer = document.getElementById(\"message\")\n\n  /**\n   * function to record screen\n   */\n  static startRecording = async () => {\n    this.videoRef.style.display='block'\n    this.videoRef.setAttribute('autoplay',true)\n    try {\n      this.videoRef.srcObject = await navigator.mediaDevices.getDisplayMedia(RECORD_OPTIONS)\n      document.getElementById('video').appendChild(this.videoRef)\n    } catch (err) {\n      console.error(\"Error: \" + err)\n    }\n  }\n\n  /**\n   * function to stop recording\n   */\n  static stopRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.videoRef.srcObject = null;\n  }\n\n  static pauseRecording = () => {\n    let tracks = this.videoRef.srcObject.getTracks();\n    tracks.forEach(track => track.stop());\n    this.hideVideo()\n    this.showMessage()\n  }\n\n  static hideVideo = () => {\n    this.videoRef.style.display=\"none\"\n  }\n\n  static showMessage = (header,content) => {\n    const messageHead = document.createElement('p')\n    const messageInfo = document. createElement('p')\n    const div = document.createElement('div')\n    div.className='msg-content'\n    messageHead.innerText = MESSAGE_HEADER\n    messageInfo.innerHTML = MESSAGE_CONTENT\n    div.appendChild(messageHead)\n    div.appendChild(messageInfo)\n    this.msgContainer.appendChild(div)\n  }\n\n  static removeMessage = () => {\n\n  }\n}\n"]},"metadata":{},"sourceType":"module"}